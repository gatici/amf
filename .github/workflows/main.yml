# SPDX-License-Identifier: Apache-2.0
# Copyright 2023 Canonical Ltd.
# Copyright 2024 Intel Corporation

name: Main workflow

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    uses: omec-project/.github/.github/workflows/build.yml
    with:
      branch_name: ${{ github.ref }}

  docker-build:
    uses: omec-project/.github/.github/workflows/docker-build.yml
    with:
      branch_name: ${{ github.ref }}

  static-analysis:
    uses: omec-project/.github/.github/workflows/static-analysis.yml
    with:
      branch_name: ${{ github.ref }}

  lint:
    uses: omec-project/.github/.github/workflows/lint.yml
    with:
      branch_name: ${{ github.ref }}

  hadolint:
    uses: omec-project/.github/.github/workflows/hadolint.yml
    with:
      branch_name: ${{ github.ref }}

  license-check:
    uses: omec-project/.github/.github/workflows/license-check.yml
    with:
      branch_name: ${{ github.ref }}

  fossa-scan:
    uses: omec-project/.github/.github/workflows/fossa-scan.yml
    with:
      branch_name: ${{ github.ref }}

  unit-tests:
    uses: omec-project/.github/.github/workflows/unit-test.yml
    with:
      branch_name: ${{ github.ref }}

  e2e-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update and install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential git iptables libsctp1 openssh-server pipx
          pipx install --include-deps 'ansible<2.16'
          pipx ensurepath

      - name: Install Ansible Galaxy collections
        run: |
          ansible-galaxy collection install kubernetes.core ansible.utils community.docker

      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N "" -q
          cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

      - name: Clone aether-onramp repository
        run: |
          git clone --recursive https://github.com/opennetworkinglab/aether-onramp.git
          cd aether-onramp

      - name: Update files
        run: |
          IP_ADDR=$(ip a show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
          echo "Extracted IP: ${IP_ADDR}"
          ls -l ~/.ssh/id_rsa
          id
          free -m
          lscpu
          echo "[all]" > aether-onramp/hosts.ini
          echo "node1 ansible_host=${IP_ADDR} ansible_user=runner ansible_ssh_private_key_file=~/.ssh/id_rsa" >> aether-onramp/hosts.ini
          echo "" >> aether-onramp/hosts.ini
          echo "[master_nodes]" >> aether-onramp/hosts.ini
          echo "node1" >> aether-onramp/hosts.ini
          sed -i "s/ens18/eth0/" aether-onramp/vars/main.yml
          sed -i "s/10.76.28.113/${IP_ADDR}/" aether-onramp/vars/main.yml

      - name: Test aether-pingall
        working-directory: aether-onramp
        run: make aether-pingall

      - name: Install aether-k8s
        working-directory: aether-onramp
        run: |
          make aether-k8s-install
        continue-on-error: true

      - name: Install 5G Core
        working-directory: aether-onramp
        run: |
          make aether-5gc-install
        continue-on-error: true

      - name: Install GNBSIM
        working-directory: aether-onramp
        run: |
          make aether-gnbsim-install
        continue-on-error: true

      - name: Upload files and output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: aether-onramp-logs
          path: ./aether-onramp/
      
